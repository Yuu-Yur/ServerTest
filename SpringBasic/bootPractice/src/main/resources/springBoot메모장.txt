Controller 는 그대로

Service 도 그대로

View 는 html 을 사용하고 thymeleaf 를 사용해 layout 가능 , html 내에서 간단한 java 문법 사용 가능
layout:fragment
th:text 출력
th:each 반복문
th:if
삼항연산자 사용 가능
태그 안에서 사용하거나 태그 밖에서 [[ ]] 안에 el 표기법으로 사용
위치도 a 링크도 th 를 사용해서 지정 가능
html 태그에 th: , layout: 설정 필요 base 외에 상속되는 html 파일엔 추가로 base 위치 지정 필요

DTO

DAO myBatis Mapper 이용해서 구현하는 방식에서 repository 로 변경
    1. Query method 를 사용한 기본적인 crud 사용 가능 JpaRepository<> 상속
    이것을 implement 하여 사용 하는 것이 쿼리 스트링
    sql 이 내장되어 있는 method name 사용
    2. @Query 사용
    annotation 뒤에 직접 sql 작성
    3. querydsl 사용 JPQL
    Querydsl 을 이용하여 QBoard 자동 생성, 더 복잡한 sql 문을 동적으로 작업 가능
    검색 기능 DAO 구현
    search 패키지에 BoardSearch , ~Impl 생성
    Repository 가 BoardSearch 상속


VO Entity 클래스를 이용하여 직접 DB 에 간섭 가능 Board 이름은 DB 의 table 이름이 됨
   Board 의 field 들은 column name 이 됨
   즉 VO 가 각각의 table 로 취급할 수 있음
   BaseEntity 를 이용하여 각각의 table 에 공통으로 들어가는 column 을 설정 가능
   이것을 각각의 table 들이 상속받아 사용 , 이를 위해 BaseEntity 는 abstract class
   @MappedSuperclass
   @EntityListeners(AuditingEntityListener.class)
   라는 annotation 필요
   마지막으로 실행 class , 처음 시작되는 곳에서
   @EnableJpaAuditing jpaAuditing 이 가능하게
   annotation 지정 필요

작업하는 공간 templates 에서 css 를 참조할 때 th : href ${} 로 지정하면 static 을 참조할 수 있음
레이아웃을 저장해 두는 static 에서 css 를 참조할 때 href : 로 직접 지정 단순 확인용으로 잘 사용하지 않음

get 으로 보내면 그냥 querystring 으로 pageRequestDTO 으로 자동 수집, 내보내기 , 이 안에서 keyword 에 대해 encoding 있음
post 일 시 따로 PostMapping 에서 받아야 함 pageRequestDTO 를 거치지 않으므로 따로 encoding 필요
그런데 그냥 form 에서 변수 통일시켜서 보내면 pageRequestDTO 에 있는 필드들은 자동으로 수집이 안되나? 됨


RestController 쓸 때 화면 확인
    swagger UI
    spring boot특화
    spring 실행중
    http://localhost:8080/swagger-ui/index.html
    에서 확인 가능

    postman
    범용성 높음
    github이랑 비슷함 RestController 때 사용
    지금은 localhost에서 사용하기 때문에 web 버전의 postman 은 에러 발생
    desktop 버전을 다운받아 사용

axios 비동기 처리문법을 동기화코드처럼 이용 가능한 문법
        async(비동기 함수 선언), await(함수진행중 값을 받아올 때 까지 시간이 걸리는데
        이때 계속 기다리는 것이 아니라 값을 받아 올 때 까지 다른것(함수)를 할 수 있게 해줌
        , 간단하게 받아올때까지 기다린다 이때 기다림을 깨울 통보가 필요
        이 통보를 해 줄 것이라는 promise 타입을 반환 약간 thread 의 wait notify 와 비슷한관계?)
         키워드를 이용해서, 비동기 처리를 동기화코드처럼 이용 가능
        cdn 으로 axios 가져와야함 그리고 js 이용 ==> static/js 에 만들고 참조

view 에서 비동기 함수를 호출하게 되면,
        '데이터 호출(getList)의 성공 여부'에 따라서,
        성공시, then  절 처리,
        실패시, catch 절 처리.

RESTful 방식 작업
        데이터 관련 Entity, Repository, Service, Controller 작성
        Entity <= baseEntity , ManyToOne
        Repository <= extends JpaRepository<> , 검색필터계열 repository
        Service <= dto <=> entity mapping 해서 repository 호출 , mapping 과정에서 관계를 가진 필드들의 mapping 신경쓸 것
        Controller <= RestController 작성, RequestBody 로 Json 형식을 받아 일반 클래스로 역직렬화 필요

        js 에서 호출 관련 함수 작성
        데이터를 받아오는 함수, async, axios, await 사용, http 요청을 보내려면 `` 사용
        이때 const result = await axios.get(`/replies/list/${bno}`, {params: {page,size}})
        형식으로 result 라는 변수에 반환을 담는데, 이 반환은 Json 형식으로 직렬화 된 것이다.
        주로 필요한 데이터는 JSON 안의 data 에 있으므로 return result.data
        이때 JSON 으로 직렬화 할 데이터의 DTO(Controller 에서 반환하므로) 에서
        @JsonIgnore ,@JsonFormat(pattern = "") annotation 으로 직렬화 할 때 무시할 필드, 직렬화 패턴을 정해줄 수 있다.
        js 를 빼놓으려면 static/js

        데이터는 호출 받았으니 이걸 출력하는 함수
        동적 변수를 html 코드에 써야 하니 js 에서 html 코드를 만들어서
        querySelector 로 지정한 곳에 innerHTML 로 추가하는 함수
        비동기 방식일 때 register 하면 내가 본 가장 마지막이 아닐 수 있음
        따라서 가장 마지막에 register 한다는 goLast 라는 parameter 써야함

        crud 해보기
        위와 같은 방법으로 RestController 에 받을 mapping 과 tag 를 annotation 으로 선언
        받을 때 주소를 {} 로 받아 @PathVariable("") 로 parameter 로 사용 가능
        반환하여 modal 이나 alert 로 화면에서 출력 가능
        js 에서 자주 쓰는 화면의 요소나 서버에서 받은 데이터엔 상수 선언