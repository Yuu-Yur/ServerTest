Controller 는 그대로

Service 도 그대로

View 는 html 을 사용하고 thymeleaf 를 사용해 layout 가능 , html 내에서 간단한 java 문법 사용 가능
layout:fragment
th:text 출력
th:each 반복문
th:if
삼항연산자 사용 가능
태그 안에서 사용하거나 태그 밖에서 [[ ]] 안에 el 표기법으로 사용
위치도 a 링크도 th 를 사용해서 지정 가능
html 태그에 th: , layout: 설정 필요 base 외에 상속되는 html 파일엔 추가로 base 위치 지정 필요

DTO

DAO myBatis Mapper 이용해서 구현하는 방식에서 repository 로 변경
    1. Query method 를 사용한 기본적인 crud 사용 가능 JpaRepository<> 상속
    이것을 implement 하여 사용 하는 것이 쿼리 스트링
    sql 이 내장되어 있는 method name 사용
    2. @Query 사용
    annotation 뒤에 직접 sql 작성
    3. querydsl 사용 JPQL
    Querydsl 을 이용하여 QBoard 자동 생성, 더 복잡한 sql 문을 동적으로 작업 가능
    검색 기능 DAO 구현
    search 패키지에 BoardSearch , ~Impl 생성
    Repository 가 BoardSearch 상속


VO Entity 클래스를 이용하여 직접 DB 에 간섭 가능 Board 이름은 DB 의 table 이름이 됨
   Board 의 field 들은 column name 이 됨
   즉 VO 가 각각의 table 로 취급할 수 있음
   BaseEntity 를 이용하여 각각의 table 에 공통으로 들어가는 column 을 설정 가능
   이것을 각각의 table 들이 상속받아 사용 , 이를 위해 BaseEntity 는 abstract class
   @MappedSuperclass
   @EntityListeners(AuditingEntityListener.class)
   라는 annotation 필요
   마지막으로 실행 class , 처음 시작되는 곳에서
   @EnableJpaAuditing jpaAuditing 이 가능하게
   annotation 지정 필요

작업하는 공간 templates 에서 css 를 참조할 때 th : href ${} 로 지정하면 static 을 참조할 수 있음
레이아웃을 저장해 두는 static 에서 css 를 참조할 때 href : 로 직접 지정 단순 확인용으로 잘 사용하지 않음

get 으로 보내면 그냥 querystring 으로 pageRequestDTO 으로 자동 수집, 내보내기 , 이 안에서 keyword 에 대해 encoding 있음
post 일 시 따로 PostMapping 에서 받아야 함 pageRequestDTO 를 거치지 않으므로 따로 encoding 필요
그런데 그냥 form 에서 변수 통일시켜서 보내면 pageRequestDTO 에 있는 필드들은 자동으로 수집이 안되나? 됨


RestController 쓸 때 화면 확인
    swagger UI
    spring boot특화
    spring 실행중
    http://localhost:8080/swagger-ui/index.html
    에서 확인 가능

    postman
    범용성 높음
    github이랑 비슷함 RestController 때 사용
    지금은 localhost에서 사용하기 때문에 web 버전의 postman 은 에러 발생
    desktop 버전을 다운받아 사용

axios 비동기 처리문법을 동기화코드처럼 이용 가능한 문법
        async(비동기 함수 선언), await(함수진행중 값을 받아올 때 까지 시간이 걸리는데
        이때 계속 기다리는 것이 아니라 값을 받아 올 때 까지 다른것(함수)를 할 수 있게 해줌
        , 간단하게 받아올때까지 기다린다 이때 기다림을 깨울 통보가 필요
        이 통보를 해 줄 것이라는 promise 타입을 반환 약간 thread 의 wait notify 와 비슷한관계?)
         키워드를 이용해서, 비동기 처리를 동기화코드처럼 이용 가능
        cdn 으로 axios 가져와야함 그리고 js 이용 ==> static/js 에 만들고 참조

view 에서 비동기 함수를 호출하게 되면,
        '데이터 호출(getList)의 성공 여부'에 따라서,
        성공시, then  절 처리,
        실패시, catch 절 처리.

RESTful 방식 작업
        데이터 관련 Entity, Repository, Service, Controller 작성
        Entity <= baseEntity , ManyToOne
        Repository <= extends JpaRepository<> , 검색필터계열 repository
        Service <= dto <=> entity mapping 해서 repository 호출 , mapping 과정에서 관계를 가진 필드들의 mapping 신경쓸 것
        Controller <= RestController 작성, RequestBody 로 Json 형식을 받아 일반 클래스로 역직렬화 필요

        js 에서 호출 관련 함수 작성
        데이터를 받아오는 함수, async, axios, await 사용, http 요청을 보내려면 `` 사용
        이때 const result = await axios.get(`/replies/list/${bno}`, {params: {page,size}})
        형식으로 result 라는 변수에 반환을 담는데, 이 반환은 Json 형식으로 직렬화 된 것이다.
        주로 필요한 데이터는 JSON 안의 data 에 있으므로 return result.data
        이때 JSON 으로 직렬화 할 데이터의 DTO(Controller 에서 반환하므로) 에서
        @JsonIgnore ,@JsonFormat(pattern = "") annotation 으로 직렬화 할 때 무시할 필드, 직렬화 패턴을 정해줄 수 있다.
        js 를 빼놓으려면 static/js

        데이터는 호출 받았으니 이걸 출력하는 함수
        동적 변수를 html 코드에 써야 하니 js 에서 html 코드를 만들어서
        querySelector 로 지정한 곳에 innerHTML 로 추가하는 함수
        비동기 방식일 때 register 하면 내가 본 가장 마지막이 아닐 수 있음
        따라서 가장 마지막에 register 한다는 goLast 라는 parameter 써야함

        crud 해보기
        위와 같은 방법으로 RestController 에 받을 mapping 과 tag 를 annotation 으로 선언
        받을 때 주소를 {} 로 받아 @PathVariable("") 로 parameter 로 사용 가능
        반환하여 modal 이나 alert 로 화면에서 출력 가능
        js 에서 자주 쓰는 화면의 요소나 서버에서 받은 데이터엔 상수 선언

파일 업로드 (컨트롤러 작업, 파일 자체 저장)
        1. boot 설정에서 파일 업로드 가능 설정, 업로드 받은 파일 저장할 경로 설정, 저장할 경로의 폴더 생성
        2. front 에서 받아올 uploadFileDTO 작업 MultipartFile 의 List 를 files
        3. 파일을 받을 수 있게 restController 작업
        3-1. 실제 파일명 조회 uploadFileDTO 에서 getter 호출 유효성 체크 ,
             foreach 로 multipartFile 변수(uploadFileDTO 의 MultipartFile List 에서 꺼낸 multipartFile), 람다식 .getOriginalFileName
        3-2. uuid 생성 UUID.randomUUID.toString
        3-3. restController 에서 받은 파일 저장할 경로 @Value("경로저장한 변수(1.에서 설정)")
        3-4. Paths.get 으로 3-3에 만든 패스 , uuid + originName 으로 정의하고 Path 에 할당 (여기에 저장할 건데 파일명중복안되게)
        3-5. 예외처리 tryCatch 하고 multipartFile(3-1 의 변수).transferTO(3-4의 Path) 사진 저장
        4. 보내는 요청 body 는 file(s) : 파일 (확인할 때 파일이 안올라가면 postMan desktop), 3에서 지정한 위치에 저장되는지 확인
        5. 사진을 그대로 웹상에서 사용하면 코스트 소모가 심하기에 thumbnail 사용 따라서 사진을 thumbnail 로 변환시켜주는 thumbnailator 라이브러리 이용
        6. 컨텐츠 타입(MIME) 확인해서 이미지라면 thumbnailator 이용해서 thumbnail 변환 저장 thumbnail 이라는 표시로 이름 앞에 s_
        6-1 MIME 는 타입/확장자 ex) image/jpeg , image/png , text/plain 등
        7. if Files.probeContentType(3-3의 Path).startWith("image(이게 컨텐츠 타입)") 해서
        7-1. 3-4에 앞에 "s_" 붙여서 File 타입에 할당하고
        7-2. thumbnailator.createThumbnail(3-4의 Path.toFile (이미 저장되어있는 파일을(3-5) 다시 파일로), 7-1.의 경로, 200,200 크기지정) thumbnail 저장
        8. front 로 보낼 uploadResultDTO 작업 지금 저장된 파일은 이미지면 s_uuid_fileName 의 형태
        8-1. 따라서 field 로 uuid, fileName 특정 타입이라는 것을 알릴 boolean 들이 필요
        8-2. getLink() mtehod 만들고 특정타입 if 면 특정 타입이라 추가된 (예를 들어)"s_"+ 를 붙인 uuid+"_"+fileName 반환
        8-3. 아니라면 그냥 uuid+"_"+fileName 반환
        9. restController 에서 8의 uploadResultDTO 의 List (여러 파일일 수 있으므로) 반환
        9-1. 반환할 List 만들어야함 특정 타입의 boolean 만들고 7.에서 저장할 때 true
        9-2. list.add 에 만들어둔 uploadResultDTO 를 builder 로 만들어서 추가 9-1 의 boolean 도 넣어주고


파일 조회
        1.RestController 작업 fileName 을 parameter 로 받는 매핑메서드
        1-1. Resource 이용 resource = FileSystemResource(지정한 Path + File.separator + fileName) 요청 받은 fileName 을 내가 사용하는 Path 아래에서 찾아서 resource 에 할당
        1-2. resource.getFilename 으로 name 할당해서 제대로 불러왔는지 콘솔한번 찍어보기
        2. http 헤더 작업 HttpHeaders = new HttpHeaders() 새 헤더 하나만들어서 < http 통신일 때 전달하는 데이터의 종류를 알려줘야함
        2-1. headers 에 add() 로 키 "Content-Type",값 Files.probeContentType(resource.getFile().toPath()) 를 넣음
        3. return 으로 ResponseEntity .ok 로 200 보내고 .headers(headers(2에서 만듬, 파일 타입)) 로 헤더 지정 .body(resource(1에서 만듬, 파일)) 로 내용 보냄 tryCatch 로 예외대응
파일 다운로드
        1. tryCatch normalize() 불필요 한 요소를 제거 ex) 상대경로
        1-1. Path filePath = Paths.get(boot 지정경로).resolve(fileName).normalize() 지정 경로 하위에서 fileName 을 찾고 불필요한 요소 제거
        1-2. resource = new UrlResource(filePath.toUri()) 로 resource 할당
        2. httpHeaders 에 할당하는 것이 다름 조회에선 contentType 을 할당했다면 다운로드 할 땐 (\" 이스케이프 로 " + resource.getFilename() + "을 감쌈)
           키 HttpHeaders.CONTENT_DISPOSITION, 값 " attachment; filename= \" " + resource.getFilename() + " \" "
           CONTENT_DISPOSITION 은 미리 지정되어있는 키 "content-disposition"
fileSystemResource vs UrlResource
fileSystemResource 는 내부에서 처리할 때 , UrlResource 는 외부에서 접근할 필요가 있을 때
지금 restController 에서 처리하므로 서버를 기준으로 조회는 파일의 정보를 클라이언트로 주는 것으로 fileSystem 으로 불러와 그 정보만 클라이언트에 보냄
다운로드는 클라이언트가 가져갈 필요가 있으므로 서버가 파일에 접근할 수 있는 Url 을 만들어 클라이언트에 줌

파일 관련 서비스 작업
        이렇게 서버에 넘어온 파일은 미디어 db 에 저장되고 일반 db 엔 파일 이름을 저장한다. (FoodImage 의 필드가 uuid, name, ord, entity)
        이때 받는 DTO 와 Entity 의 바인딩이 필요함 이것을 서비스에 default 로 작성
        이 DTO 에 대해 crud 작업은 크게 다른건 없고 전체 조회 시 썸네일 출력하는것, 하나 조회 시 원본 출력,
        수정 시 기존 첨부 이미지 전체 삭제 후 다시 업로드 하는 것이 낫다.
        삭제 시 파일은 OneToMany 로 cascading 되어 삭제되지만 댓글은 관계가 안맺어져 직접 확인하고 삭제하는 과정이 필요하다.

파일 관련 화면 작업
        컨트롤러는 이미 만들었으므로 컨트롤러에 요청을 보내면 되는데 메서드를 부르는 방식 말고도 post 를 보내는 것 처럼
        await axios({
                method : 'post',
                url : '/upload',
                data : formObj,
                headers : {
                    'Content-Type' : 'multipart/form-data'
                }
            });
        이런 방식을 쓸 수도 있다.
        화면에서 서버로 첨부 파일(이미지) formObj 보낼 때 Content-Type 은 multipart/form-data 로 지정해야 한다.
        삭제 는 만들었던 controller 의 method 를 호출하여 요청을 보내면 된다.
        등록 화면에서 파일 첨부 버튼 만들고 모달을 불러와서 위의 업로드 js 에 부합하는 form 을 작업하면된다.
        querySelector 에서 class 나 id 뿐 아니라 name 의존 tag 도 찍을 수 있다. "tag 명[name='지정한 name']"
        비 구조화 문법 할당 parameter 을 클래스에 자동 수집하는 것의 정확히 반대, 클래스의 필드 를 parameter 에 자동 할당